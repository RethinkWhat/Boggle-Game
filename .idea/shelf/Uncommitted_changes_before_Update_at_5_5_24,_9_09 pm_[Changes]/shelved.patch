Index: src/client/controller/subpages/GameRoomController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package client.controller.subpages;\n\nimport client.controller.ClientApplicationController;\nimport client.model.subpages.GameRoomModel;\nimport client.view.subpages.GameRoomView;\nimport shared.CustomizedMessageDialog;\nimport shared.SwingResources;\nimport shared.SwingStylesheet;\n\nimport javax.sound.sampled.AudioInputStream;\nimport javax.sound.sampled.AudioSystem;\nimport javax.sound.sampled.Clip;\nimport javax.swing.*;\nimport java.awt.*;\nimport java.awt.event.ActionEvent;\nimport java.awt.event.ActionListener;\nimport java.io.File;\nimport java.io.IOException;\nimport java.util.*;\nimport java.util.List;\n\n/**\n * The GameRoomController processes user requests for specifying their inputs, computing and comparing scores,\n * handling the local leaderboard, and concluding the current round and game.\n */\npublic class GameRoomController {\n    /**\n     * The view.\n     */\n    private GameRoomView view;\n    /**\n     * The model.\n     */\n    private GameRoomModel model;\n    /**\n     * The parent controller.\n     */\n    private ClientApplicationController parent;\n    /**\n     * Specifies whether the music is turned on or off.\n     */\n    private boolean musicOn;\n    /**\n     * Specifies whether the sound effects are turned on or off.\n     */\n    private boolean sfxOn;\n    /**\n     * The audio input stream for sfx.\n     */\n    private AudioInputStream audioSoundStream;\n    /**\n     * The SFX clip.\n     */\n    private Clip sfxClip;\n    /**\n     * The stylesheet.\n     */\n    private final SwingStylesheet style = new SwingStylesheet();\n    /**\n     * The bad input sfx file path.\n     */\n    private final String badInput = \"res/audio/sfx/bad-input-sfx.wav\";\n    /**\n     * The good input sfx file path.\n     */\n    private final String goodInput = \"res/audio/sfx/good-input-sfx.wav\";\n    /**\n     * The countdown sfx file path.\n     */\n    private final String countdown = \"res/audio/sfx/countdown-10s-sfx.wav\";\n    /**\n     * The round over sfx file path.\n     */\n    private final String roundOver = \"res/audio/sfx/round-over-sfx.wav\";\n    /**\n     * The lose sfx file path.\n     */\n    private final String lose = \"res/audio/sfx/lose-sfx.wav\";\n    /**\n     * The win sfx file path.\n     */\n    private final String win = \"res/audio/sfx/winner-sfx.wav\";\n    /**\n     * The round number to update the view.\n     */\n    private int roundNumber;\n\n    /**\n     * Constructs a GameRoomController with a specified view, model, and parent controller.\n     *\n     * @param model The specified model.\n     * @param view  The specified view.\n     */\n    public GameRoomController(GameRoomModel model, GameRoomView view, ClientApplicationController parent) {\n        this.model = model;\n        this.view = view;\n        this.parent = parent;\n\n        musicOn = true; // music on by default\n        sfxOn = true; // sfx on by default.\n\n        roundNumber = 1;\n        view.setRoundNumber(roundNumber);\n\n        // action listeners\n        view.setMusicToggleListener(new MusicListener());\n        view.setSoundToggleListener(new SoundListener());\n        view.setInputListener(new InputListener());\n        view.setClearListener(e -> {\n            view.getTxtWordInput().setText(\"\");\n            view.setErrorMessage(\"\");\n        });\n\n        // mouse listeners\n        view.getBtnClear().addMouseListener(new SwingResources.CursorChanger(view.getBtnClear()));\n        view.getBtnMusicToggle().addMouseListener(new SwingResources.CursorChanger(view.getBtnMusicToggle()));\n        view.getBtnSoundToggle().addMouseListener(new SwingResources.CursorChanger(view.getBtnSoundToggle()));\n\n        // focus listeners\n        view.getTxtWordInput().addFocusListener(new SwingResources.TextFieldFocus(view.getTxtWordInput(),\n                \"Enter word here.\", view.getLblErrorMessage()));\n\n        view.revalidate();\n        view.repaint();\n\n        startNextRound();\n    }\n\n    private void startNextRound() {\n        Thread timer = new Thread(gameTimer());\n        timer.start();\n    }\n\n\n    public Runnable gameTimer() {\n        Runnable toReturn = new Runnable() {\n            @Override\n            public void run() {\n                try {\n                    model.getWordSet().clear();\n                    populateLetterSet(model.getLetterList());\n                    int inSeconds = (int) model.getWfImpl().getGameDurationVal(model.getGameRoomID() / 1000);\n                    System.out.println(\"IN SECONDS: \" + inSeconds);\n                    view.setPrgTimerMaxVal(inSeconds);\n                    System.out.println(inSeconds);\n                    while (inSeconds >= 0) {\n                        Thread.sleep(1000);\n                        view.setLblTimerTxt(inSeconds);\n                        inSeconds = (int) model.getWfImpl().getGameDurationVal(model.getGameRoomID() / 1000);\n                        view.setPrgTimerValue(inSeconds);\n                        System.out.println(inSeconds);\n                        if (inSeconds == 10) {\n                            sfxCountdown();\n                            SwingUtilities.invokeLater(() -> {\n                                view.getPrgTimer().setBackground(style.red);\n                                view.getLblTimer().setForeground(style.red);\n                            });\n                        } else if (inSeconds == 0) {\n                            SwingUtilities.invokeLater(() -> {\n                                view.getPrgTimer().setBackground(style.goldenTainoi);\n                                view.getLblTimer().setForeground(style.white);\n                            });\n                            model.sendUserWordList();\n\n                            String usernameWinnerRound = model.getWfImpl().getRoundWinner(model.getGameRoomID());\n                            String usernameWinnerGame = model.getWfImpl().getOverallWinner(model.getGameRoomID());\n\n                            // displays dialog messages and plays respective sfx.\n                            if (!usernameWinnerGame.equals(\"undecided\")) {\n                                if (model.getUsername().equals(usernameWinnerGame)) {\n                                    sfxWinner();\n                                    new CustomizedMessageDialog(\"Game Winner\", style.iconWinner, \"YOU WON!\",\n                                            \"You have won the game.\", \"EXIT GAME\", style.deepSkyBlue,\n                                            style.goldenTainoi, style.black, style.goldenTainoi, false);\n                                } else {\n                                    sfxLose();\n                                    CustomizedMessageDialog dialog = new CustomizedMessageDialog(\"Game Winner\",\n                                            style.iconWinner, \"WE HAVE A WINNER!\",\n                                            usernameWinnerGame + \" has won the game.\", \"EXIT GAME\",\n                                            style.deepSkyBlue, style.goldenTainoi, style.black,\n                                            style.goldenTainoi, false);\n                                    dialog.setBtnDialogListener(e -> parent.getView().getCardLayout().show(parent.getView().getPnlCards(), \"home\"););\n                                }\n                            } else {\n                                sfxRoundOver();\n                                if (model.getUsername().equals(usernameWinnerRound)) {\n                                    new CustomizedMessageDialog(\"Round Winner\", style.iconWinner, \"YOU WON THE ROUND!\",\n                                            \"You had the most points this round.\", \"NEXT ROUND\", style.deepSkyBlue,\n                                            style.goldenTainoi, style.black, style.goldenTainoi, false);\n                                } else {\n                                    new CustomizedMessageDialog(\"Round Done\", style.iconWinner, \"ROUND DONE\",\n                                            usernameWinnerRound + \" had the most points this round.\",\n                                            \"NEXT ROUND\", style.deepSkyBlue, style.goldenTainoi, style.black,\n                                            style.goldenTainoi, false);\n                                }\n                                model.setLetterList(model.getWfImpl().getNextRoundLetterSet(model.getGameRoomID()));\n                                view.setRoundNumber(roundNumber++);\n                                startNextRound();\n                            }\n                        }\n                    }\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n        return toReturn;\n    }\n\n    /**\n     * Processes player inputting a word.\n     */\n    class InputListener implements ActionListener {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            view.setErrorMessage(\"\");\n            String input = view.getTxtWordInput().getText().trim();\n\n            // TODO: check word text if it conforms to the letter set\n            if (!input.contains(\" \") && input.length() >= 4) {\n                if (!validateInput(input)) {\n                    view.setErrorMessage(\"Input must only contain LETTERS!\");\n                    view.getTxtWordInput().setText(\"\");\n                    sfxBadInput();\n                } else {\n                    view.addUserInput(model.getUsername(), input);\n                    view.updateTxaHeight();\n                    model.getWordSet().add(input);\n                    view.getTxtWordInput().setText(\"\");\n                    sfxGoodInput();\n                }\n            } else if (input.length() < 4) {\n                view.setErrorMessage(\"Input must be at least 4 CHARACTERS!\");\n                view.getTxtWordInput().setText(\"\");\n                sfxBadInput();\n            } else {\n                view.setErrorMessage(\"Input must only be a WORD!\");\n                view.getTxtWordInput().setText(\"\");\n                sfxBadInput();\n            }\n        }\n    }\n\n    /**\n     * Turns the music on or off.\n     */\n    class MusicListener implements ActionListener {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            SwingUtilities.invokeLater(() -> {\n                if (musicOn) {\n                    musicOn = false;\n                    view.setBtnMusicIcon(style.iconMusicOff);\n                    parent.getMusicClip().getMicrosecondPosition();\n                    parent.getMusicClip().stop();\n                } else {\n                    musicOn = true;\n                    view.setBtnMusicIcon(style.iconMusicOn);\n                    parent.getMusicClip().getMicrosecondPosition();\n                    parent.getMusicClip().start();\n                }\n            });\n        }\n    }\n\n    /**\n     * Turns the sound effects on or off.\n     */\n    class SoundListener implements ActionListener {\n        @Override\n        public void actionPerformed(ActionEvent e) {\n            SwingUtilities.invokeLater(() -> {\n                if (sfxOn) {\n                    sfxOn = false;\n                    view.setBtnSoundIcon(style.iconSoundOff);\n                    try {\n                        audioSoundStream.reset();\n                    } catch (IOException ex) {\n                        throw new RuntimeException(ex);\n                    }\n                } else {\n                    sfxOn = true;\n                    view.setBtnSoundIcon(style.iconSoundOn);\n                }\n            });\n        }\n    }\n\n    /**\n     * Validates each character of the input string to ensure that it is a valid word.\n     *\n     * @param input The specified player input.\n     * @return True if valid letter, false if any other character.\n     */\n    private boolean validateInput(String input) {\n        for (int i = 0; i < input.length(); i++) {\n            if (!Character.isLetter(input.charAt(i)) || Character.isWhitespace(input.charAt(i))) {\n                return false;\n            }\n            if (!queryValidWords(input)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean queryValidWords(String word) {\n        // TODO: Implementation\n        return false;\n    }\n\n    /**\n     * Creates a hash map containing the username as the key, and the value as the words set (words entered by the user).\n     * @return hash map of username as key, word set as value.\n     */\n    public Map<String, List<String>> getCurrentRoundWordList() {\n        Map<String, List<String>> userWordMap = new HashMap<>();\n        List<String> wordList = new ArrayList<>(model.getWordSet());\n        String username = model.getUsername();\n\n        userWordMap.put(username, wordList);\n\n        return userWordMap;\n    }\n\n    /**\n     * Populates the letter set in the view by adding the elements of the specified vowel set and consonant set, then\n     * randomizing its order of appearance.\n     * @param letterList the specified letter list containing the random vowels and consonants.\n     */\n    private void populateLetterSet(String letterList) {\n        List<String> letterSet = new ArrayList<>();\n        Color backgroundColor;\n\n        for (int i = 0; i < letterList.length(); i++) {\n            letterSet.add(letterList.substring(i, i + 1));\n        }\n\n        Collections.shuffle(letterSet);\n\n        for (String letter : letterSet) {\n            backgroundColor = letter.matches(\"[AEIOU]\") ? style.deepSkyBlue : style.goldenTainoi;\n            view.addLetterToLetterSet(letter, backgroundColor);\n        }\n    }\n\n    /**\n     * Plays the bad input sfx.\n     */\n    private void sfxBadInput() {\n        if (sfxOn) {\n            try {\n                sfxClip.stop();\n                audioSoundStream = AudioSystem.getAudioInputStream(new File(badInput));\n                sfxClip = AudioSystem.getClip();\n                sfxClip.open(audioSoundStream);\n                sfxClip.start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * Plays the good input sfx.\n     */\n    private void sfxGoodInput() {\n        if (sfxOn) {\n            try {\n                sfxClip.stop();\n                audioSoundStream = AudioSystem.getAudioInputStream(new File(goodInput));\n                sfxClip = AudioSystem.getClip();\n                sfxClip.open(audioSoundStream);\n                sfxClip.start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * Plays the countdown sfx.\n     */\n    private void sfxCountdown() {\n        if (sfxOn) {\n            try {\n                sfxClip.stop();\n                audioSoundStream = AudioSystem.getAudioInputStream(new File(countdown));\n                sfxClip = AudioSystem.getClip();\n                sfxClip.open(audioSoundStream);\n                sfxClip.start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * Plays the round over sfx.\n     */\n    private void sfxRoundOver() {\n        if (sfxOn) {\n            try {\n                sfxClip.stop();\n                audioSoundStream = AudioSystem.getAudioInputStream(new File(roundOver));\n                sfxClip = AudioSystem.getClip();\n                sfxClip.open(audioSoundStream);\n                sfxClip.start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * Plays the winner sfx.\n     */\n    private void sfxWinner() {\n        if (sfxOn) {\n            try {\n                sfxClip.stop();\n                audioSoundStream = AudioSystem.getAudioInputStream(new File(win));\n                sfxClip = AudioSystem.getClip();\n                sfxClip.open(audioSoundStream);\n                sfxClip.start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * Plays the lose sfx.\n     */\n    private void sfxLose() {\n        if (sfxOn) {\n            try {\n                sfxClip.stop();\n                audioSoundStream = AudioSystem.getAudioInputStream(new File(lose));\n                sfxClip = AudioSystem.getClip();\n                sfxClip.open(audioSoundStream);\n                sfxClip.start();\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/client/controller/subpages/GameRoomController.java b/src/client/controller/subpages/GameRoomController.java
--- a/src/client/controller/subpages/GameRoomController.java	(revision 009dfec77d791be044c6de54976ebd730e4f451a)
+++ b/src/client/controller/subpages/GameRoomController.java	(date 1714914536110)
@@ -179,7 +179,7 @@
                                             usernameWinnerGame + " has won the game.", "EXIT GAME",
                                             style.deepSkyBlue, style.goldenTainoi, style.black,
                                             style.goldenTainoi, false);
-                                    dialog.setBtnDialogListener(e -> parent.getView().getCardLayout().show(parent.getView().getPnlCards(), "home"););
+                                    dialog.setBtnDialogListener(e -> parent.getView().getCardLayout().show(parent.getView().getPnlCards(), "home"));
                                 }
                             } else {
                                 sfxRoundOver();
